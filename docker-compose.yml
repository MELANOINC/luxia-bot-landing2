version: '3.8'
services:
  # Node.js Frontend/API
  web:
    build: .
    env_file: .env
    environment:
      - MELANIA_BOT_URL=http://melania-bot:8000
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      melania-bot:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # MELANIA BOT Python API
  melania-bot:
    build:
      context: ./melania_bot
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "wget --spider -q http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: always
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./melania_bot/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    depends_on:
      web:
        condition: service_started
      melania-bot:
        condition: service_started
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
